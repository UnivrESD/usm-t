#1. Always Eventually Response
Input : ant
Output : cons
Template: G(ant -> F cons)

#1.5 Sequential dependency
Input : ant
Output : cons
Template: G(ant -> X cons)

#1.5.1 
Input : ant
Output : cons
Template: G(ant -> cons)

#2. Request-Acknowledge Protocol
Input : request
Output : acknowledge
Template: G(request -> F acknowledge) & G(acknowledge -> F request)

#3. Resource Allocation
Input : request
Output : grant, release
Template: G(request -> F(grant & X release)) & G(grant -> X release)

#4. Bidirectional Communication
Input : send1, send2
Output : receive1, receive2
Template: G((send1 -> F receive2) & (send2 -> F receive1))

#5. Always Eventually with Compound Antecedents
Input : ant_1, ant_2
Output : cons
Template: G((ant_1 & ant_2) -> F cons)

#6. Sequential Guarantee
Input : ant_1, ant_2
Output : p, q
Template: G((ant_1 & ant_2) -> (F p & X F q))

#7. Compound Request-Response
Input : ant_1, ant_2
Output : cons_1, cons_2
Template: G((ant_1 & ant_2) -> (F cons_1 & F cons_2))

#8. Until with Conjunction
Input : ant_1, ant_2
Output : p, q, r
Template: G((ant_1 & ant_2) -> (p & (q U r)))

#10. Conjunctive Bidirectional Communication
Input : send1, send2
Output : receive1, receive2
Template: G((send1 & send2) -> (F receive1 & F receive2))

#11. Sequential Behavior
Input : a
Output : c
Template: G(..##1.. -> ..##1..)

#12. 
Input : a
Output : c
Template: G(..&&.. -> ..&&..)
